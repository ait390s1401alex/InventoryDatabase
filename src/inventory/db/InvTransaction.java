/**
 * Copyright 2014 -
 * Licensed under the Academic Free License version 3.0
 * http://opensource.org/licenses/AFL-3.0
 * 
 * Authors: Alex Verkhovtsev
 */

package inventory.db;

import java.util.List;


import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Transaction;


/**
 * GAE ENTITY UTIL CLASS: "InvTransaction" <br>
 * PARENT: NONE <br>
 * KEY: A long Id generated by GAE <br>
 * FEATURES: <br>
 * - "transQuantity" a {@link String} with the transQuantity record for the invtransction<br>
 * - "transDate" a {@link String} with the transDate record for the invtransction<br>
 * - "invUserID" a {@link String} with the invUserID record for the invtransction<br>
 * - "productID" a {@link String} with the productID record for the invtransction<br>
 */

public class InvTransaction {

	//
	// SECURITY
	//

	/**
	 * Private constructor to avoid instantiation.
	 */
	private InvTransaction() {
	}

	//
	// KIND
	//

	/**
	 * The name of the InvTransaction ENTITY KIND used in GAE.
	 */
	private static final String ENTITY_KIND = "InvTransaction";

	//
	// KEY
	//

	/**
	 * Return the Key for a given InvTransaction id given as String.
	 * 
	 * @param invTransactionID A string with the InvTransaction ID (a long).
	 * @return the Key for this invTransactionID.
	 */
	public static Key getKey(String invTransactionID) {
		long id = Long.parseLong(invTransactionID);
		Key invTransactionKey = KeyFactory.createKey(ENTITY_KIND, id);
		return invTransactionKey;
	}

	/**
	 * Return the string ID corresponding to the key for the invtransaction.
	 * 
	 * @param product The GAE Entity storing the invtransaction.
	 * @return A string with the invtransaction ID (a long).
	 */
	public static String getStringID(Entity invTransaction) {
		return Long.toString(invTransaction.getKey().getId());
	}

	//
	// ATTRIBUTES
	//
	
	/**
	 * The property invUserID for the <b>invUserID</b> value of the invtransaction.
	 */
	private static final String INV_USERID_PROPERTY = "Inv_UserID_Quantity";
	
	/**
	 * The property productID for the <b>productID</b> value of the invtransaction.
	 */
	private static final String PRODUCTID_PROPERTY = "ProductID_Quantity";

	/**
	 * The property transQuantity for the <b>transQuantity</b> value of the invtransaction.
	 */
	private static final String TRANS_QUANT_PROPERTY = "Trans_Quantity";

	/**
	 * The property transDate for the <b>transDate</b> value of the invtransaction.
	 */
	private static final String TRANS_DATE_PROPERTY = "Trans_Date";
	
	
	
	
	//
	// GETTERS
	//
	
	/**
	 * Return the invUserID for the invtransaction.
	 * 
	 * @param invUserID The GAE Entity storing the invuserid
	 * @return the invUserID in the invtransaction.
	 */
	public static String getInvUserID(Entity invTransaction) {
		Object invUserID = invTransaction.getProperty(INV_USERID_PROPERTY);
		if (invUserID == null)
			invUserID = "";
		return (String) invUserID;
	}
	
	/**
	 * Return the productID for the invtransaction.
	 * 
	 * @param prouctID The GAE Entity storing the productid
	 * @return the productID in the invtransaction.
	 */
	public static String getProductID(Entity invTransaction) {
		Object productID = invTransaction.getProperty(PRODUCTID_PROPERTY);
		if (productID == null)
			productID = "";
		return (String) productID;
	}
	
	/**
	 * Return the transQuantity for the invtransaction.
	 * 
	 * @param transQuantity The GAE Entity storing the transquantity
	 * @return the transQuantity in the invtransaction.
	 */
	public static String getTransQuantity(Entity invTransaction) {
		Object transQuantity = invTransaction.getProperty(TRANS_QUANT_PROPERTY);
		if (transQuantity == null)
			transQuantity = "";
		return (String) transQuantity;
	}
	
	/**
	 * Return the transDate for the invtransaction.
	 * 
	 * @param transDate The GAE Entity storing the transquantity
	 * @return the transDate in the invtransaction.
	 */
	public static String getTransDate(Entity invTransaction) {
		Object transDate = invTransaction.getProperty(TRANS_DATE_PROPERTY);
		if (transDate == null)
			transDate = "";
		return (String) transDate;
	}
	
	

	

	//
	// CREATE INVTRANSACTION
	//

	/**
	 * Create a new invtransaction if the invTransactionID is correct and none exists with this id.
	 * 
	 * @param inUserID the inuser that creates the invtransaction
	 * @param productID the product that is in the intransaction
	 * @param transQuantity the transquantity for this invtransaction
	 * @param transDate the transdate for this invtransaction
	 * @return the Entity created with this id or null if error
	 */
	public static Entity createInvTransaction(String invUserID, String productID, String transQuantity, String transDate) {
		Entity invTransaction = null;
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Transaction txn = datastore.beginTransaction();
		try {

			invTransaction = new Entity(ENTITY_KIND);
			invTransaction.setProperty(INV_USERID_PROPERTY, invUserID);
			invTransaction.setProperty(PRODUCTID_PROPERTY, productID);
			invTransaction.setProperty(TRANS_QUANT_PROPERTY, transQuantity);
			invTransaction.setProperty(TRANS_DATE_PROPERTY, transDate);
			datastore.put(invTransaction);

			txn.commit();
		} catch (Exception e) {
			return null;
		} finally {
			if (txn.isActive()) {
				txn.rollback();
			}
		}

		return invTransaction;
	}

	//
	// GET INVTRANSACTION
	//

	/**
	 * Get the invtransaction based on a string containing its long ID.
	 * 
	 * @param invTransactionID a {@link String} containing the ID key (a <code>long</code> number)
	 * @return A GAE {@link Entity} for the InvTransactionID or <code>null</code> if none or error.
	 */
	public static Entity getInvTransaction(String invTransactionID) {
		Entity invTransaction = null;
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			long id = Long.parseLong(invTransactionID);
			Key invTransactionKey = KeyFactory.createKey(ENTITY_KIND, id);
			invTransaction = datastore.get(invTransactionKey);
		} catch (Exception e) {
			// TODO log the error
		}
		return invTransaction;
	}


	//
	// UPDATE INVTRANSACTION
	//

	/**
	 * Update the current description of the invtransaction
	 * 
	 * @param invTransactionID A string with the intransaction ID (a long).
	 * @param invUserID the inuser that creates the invtransaction
	 * @param productID the product that is in the intransaction
	 * @param transQuantity the transquantity for this invtransaction
	 * @param transDate the transdate for this invtransaction
	 * @param name The name of the inventoryTransaction as a String.
	 * @return true if succeed and false otherwise
	 */
	public static boolean updateProduct(String invTransactionID, String invUserID, String productID, String transQuantity, String transDate) {
		Entity invTransaction = null;
		try {
			invTransaction = getInvTransaction(invTransactionID);
			invTransaction.setProperty(INV_USERID_PROPERTY, invUserID);
			invTransaction.setProperty(PRODUCTID_PROPERTY, productID);
			invTransaction.setProperty(TRANS_QUANT_PROPERTY, transQuantity);
			invTransaction.setProperty(TRANS_DATE_PROPERTY, transDate);
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.put(invTransaction);
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	//
	// DELETE INVTRANSACTION
	//

	/**
	 * Delete the invtransaction if not linked to anything else.
	 * 
	 * @param invTransactionID A string with the invtransaction ID (a long).
	 * @return True if succeed, false otherwise.
	 */
	public static boolean deleteInvTransaction(String invTransactionID) {
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.delete(getKey(invTransactionID));
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	//
	// QUERY INVTRANSACTION
	//

	/**
	 * Return the requested number of invtransactions (e.g. 100).
	 * 
	 * @param limit The number of invtransactions to be returned.
	 * @return A list of GAE {@link Entity entities}.
	 */
	public static List<Entity> getFirstInvTransactions(int limit) {
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Query query = new Query(ENTITY_KIND);
		List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(limit));
		return result;
	}

}
