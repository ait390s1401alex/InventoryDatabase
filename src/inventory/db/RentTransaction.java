/**
 * Copyright 2014 -
 * Licensed under the Academic Free License version 3.0
 * http://opensource.org/licenses/AFL-3.0
 * 
 * Authors: Alex Verkhovtsev
 */

package inventory.db;

import java.util.Date;
import java.util.List;




import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Transaction;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterPredicate;
import com.google.appengine.api.datastore.Query.FilterOperator;


/**
 * GAE ENTITY UTIL CLASS: "RentTransaction" <br>
 * PARENT: NONE <br>
 * KEY: A long Id generated by GAE <br>
 * FEATURES: <br>
 * - "customer" a {@link String} with the customer record for the renttransction<br>
 * - "inOut" a {@link String} with the inOut record for the renttransction<br>
 * - "date" a {@link String} with the date record for the renttransction<br>
 * - "invUserID" a {@link String} with the invUserID record for the renttransction<br>
 * - "rentalID" a {@link String} with the rentalID record for the renttransction<br>
 */

public class RentTransaction {

	//
	// SECURITY
	//

	/**
	 * Private constructor to avoid instantiation.
	 */
	private RentTransaction() {
	}

	//
	// KIND
	//

	/**
	 * The name of the InvTransaction ENTITY KIND used in GAE.
	 */
	private static final String ENTITY_KIND = "RentTransaction";

	//
	// KEY
	//

	/**
	 * Return the Key for a given RentTransaction id given as String.
	 * 
	 * @param rentTransactionID A string with the RentTransaction ID (a long).
	 * @return the Key for this rentTransactionID.
	 */
	public static Key getKey(String rentTransactionID) {
		long id = Long.parseLong(rentTransactionID);
		Key rentTransactionKey = KeyFactory.createKey(ENTITY_KIND, id);
		return rentTransactionKey;
	}

	/**
	 * Return the string ID corresponding to the key for the renttransaction.
	 * 
	 * @param rentTransaction The GAE Entity storing the renttransaction.
	 * @return A string with the renttransaction ID (a long).
	 */
	public static String getStringID(Entity rentTransaction) {
		return Long.toString(rentTransaction.getKey().getId());
	}

	//
	// ATTRIBUTES
	//
	
	/**
	 * The property invUserID for the <b>invUserID</b> value of the renttransaction.
	 */
	private static final String INV_USERID_PROPERTY = "Inv_UserID";
	
	/**
	 * The property rentalID for the <b>rentalID</b> value of the renttransaction.
	 */
	private static final String RENTALID_PROPERTY = "RentalID";

	/**
	 * The property inDate for the <b>inDate</b> value of the renttransaction.
	 */
	private static final String INOUT_PROPERTY = "InOut";

	/**
	 * The property outDate for the <b>outDate</b> value of the renttransaction.
	 */
	private static final String DATE_PROPERTY = "Date";
	
	/**
	 * The property customer for the <b>customer</b> value of the renttransaction.
	 */
	private static final String CUSTOMER_PROPERTY = "Customer";
	
	/**
	 * The property customer for the <b>customer</b> value of the renttransaction.
	 */
	private static final String DATEVALUE_PROPERTY = "DateValue";
	
	
	
	
	//
	// GETTERS
	//
	
	/**
	 * Return the invUserID for the renttransaction.
	 * 
	 * @param invtransaction The GAE Entity storing the renttransaction
	 * @return the invUserID in the renttransaction.
	 */
	public static String getInvUserID(Entity rentTransaction) {
		Object invUserID = rentTransaction.getProperty(INV_USERID_PROPERTY);
		if (invUserID == null)
			invUserID = "";
		return (String) invUserID;
	}
	
	/**
	 * Return the rentalID for the renttransaction.
	 * 
	 * @param rentTransaction The GAE Entity storing the renttransaction
	 * @return the rentalID in the renttransaction.
	 */
	public static String getRentalID(Entity rentTransaction) {
		Object rentalID = rentTransaction.getProperty(RENTALID_PROPERTY);
		if (rentalID == null)
			rentalID = "";
		return (String) rentalID;
	}
	
	/**
	 * Return the inOut for the renttransaction.
	 * 
	 * @param rentTransaction The GAE Entity storing the renttransaction
	 * @return the inOut in the renttransaction.
	 */
	public static String getInOut(Entity rentTransaction) {
		Object inOut = rentTransaction.getProperty(INOUT_PROPERTY);
		if (inOut == null)
			inOut = "";
		return (String) inOut;
	}
	
	/**
	 * Return the date for the renttransaction.
	 * 
	 * @param rentTransaction The GAE Entity storing the renttransaction
	 * @return the date in the renttransaction.
	 */
	public static String getDate(Entity rentTransaction) {
		Object date = rentTransaction.getProperty(DATE_PROPERTY);
		if (date == null)
			date = "";
		return (String) date;
	}
	
	/**
	 * Return the customer for the renttransaction.
	 * 
	 * @param rentTransaction The GAE Entity storing the renttransaction
	 * @return the customer in the renttransaction.
	 */
	public static String getCustomer(Entity rentTransaction) {
		Object customer = rentTransaction.getProperty(CUSTOMER_PROPERTY);
		if (customer == null)
			customer = "";
		return (String) customer;
	}
	
	/**
	 * Return the datevalue for the renttransaction.
	 * 
	 * @param rentTransaction The GAE Entity storing the renttransaction
	 * @return the datevalue in the renttransaction.
	 */
	public static String getDateValue(Entity rentTransaction) {
		Object date = rentTransaction.getProperty(DATEVALUE_PROPERTY);
		if (date == null)
			date = "";
		return (String) date;
	}
	
	
	

	

	//
	// CREATE RENTTRANSACTION
	//

	/**
	 * Create a new renttransaction if the rentTransactionID is correct and none exists with this id.
	 * 
	 * @param inUserID the inuser that creates the renttransaction
	 * @param rentalID the rental item that is in the renttransaction
	 * @param inOut the inOut for this renttransaction
	 * @param date the date for this renttransaction
	 * @param customer the customer for this renttransaction
	 * @return the Entity created with this id or null if error
	 */
	public static Entity createRentTransaction(String invUserID, String rentalID, String inOut, String date, String customer) {
		Entity rentTransaction = null;
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Transaction txn = datastore.beginTransaction();
		try {

			rentTransaction = new Entity(ENTITY_KIND);
			rentTransaction.setProperty(INV_USERID_PROPERTY, invUserID);
			rentTransaction.setProperty(RENTALID_PROPERTY, rentalID);
			rentTransaction.setProperty(INOUT_PROPERTY, inOut);
			rentTransaction.setProperty(DATE_PROPERTY, date);
			rentTransaction.setProperty(CUSTOMER_PROPERTY, customer);
			datastore.put(rentTransaction);

			txn.commit();
		} catch (Exception e) {
			return null;
		} finally {
			if (txn.isActive()) {
				txn.rollback();
			}
		}

		return rentTransaction;
	}
	
	
	
	/**
	 * Create a new renttransaction if the rentTransactionID is correct and none exists with this id.
	 * 
	 * @param inUserID the inuser that creates the renttransaction
	 * @param rentalID the rental item that is in the renttransaction
	 * @param inOut the inOut for this renttransaction
	 * @param date the date for this renttransaction
	 * @param customer the customer for this renttransaction
	 * @return the Entity created with this id or null if error
	 */
	public static Entity createRentTransaction(String invUserID, String rentalID, String inOut, String customer) {
		Entity rentTransaction = null;
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Transaction txn = datastore.beginTransaction();
		try {

			rentTransaction = new Entity(ENTITY_KIND);
			rentTransaction.setProperty(INV_USERID_PROPERTY, invUserID);
			rentTransaction.setProperty(RENTALID_PROPERTY, rentalID);
			rentTransaction.setProperty(INOUT_PROPERTY, inOut);
			Date date = new Date();
			rentTransaction.setProperty(DATEVALUE_PROPERTY, (date.getTime() + ""));
			rentTransaction.setProperty(DATE_PROPERTY, date.toString());
			rentTransaction.setProperty(CUSTOMER_PROPERTY, customer);
			datastore.put(rentTransaction);

			txn.commit();
		} catch (Exception e) {
			return null;
		} finally {
			if (txn.isActive()) {
				txn.rollback();
			}
		}

		return rentTransaction;
	}

	//
	// GET RENTTRANSACTION
	//

	/**
	 * Get the rnettransaction based on a string containing its long ID.
	 * 
	 * @param rentTransactionID a {@link String} containing the ID key (a <code>long</code> number)
	 * @return A GAE {@link Entity} for the RentTransactionID or <code>null</code> if none or error.
	 */
	public static Entity getRentTransaction(String rentTransactionID) {
		Entity rentTransaction = null;
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			long id = Long.parseLong(rentTransactionID);
			Key rentTransactionKey = KeyFactory.createKey(ENTITY_KIND, id);
			rentTransaction = datastore.get(rentTransactionKey);
		} catch (Exception e) {
			// TODO log the error
		}
		return rentTransaction;
	}


	//
	// UPDATE RENTTRANSACTION
	//

	/**
	 * Update the current description of the renttransaction
	 * 
	 * @param rentTransactionID A string with the renttransaction ID (a long).
	 * @param invUserID the invuser that creates the renttransaction
	 * @param rentalID the rental that is in the renttransaction
	 * @param inOut the inOut for this renttransaction
	 * @param date the date for this renttransaction
	 * @param customer The customer of the renttransaction.
	 * @return true if succeed and false otherwise
	 */
	public static boolean updateRentTransaction(String rentTransactionID, String invUserID, String rentalID, String inOut, String date, String customer) {
		Entity rentTransaction = null;
		try {
			rentTransaction = getRentTransaction(rentTransactionID);
			rentTransaction.setProperty(INV_USERID_PROPERTY, invUserID);
			rentTransaction.setProperty(RENTALID_PROPERTY, rentalID);
			rentTransaction.setProperty(INOUT_PROPERTY, inOut);
			rentTransaction.setProperty(DATE_PROPERTY, date);
			rentTransaction.setProperty(CUSTOMER_PROPERTY, customer);
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.put(rentTransaction);
		} catch (Exception e) {
			return false;
		}
		return true;
	}
	
	/**
	 * Update the current description of the renttransaction
	 * 
	 * @param rentTransactionID A string with the renttransaction ID (a long).
	 * @param inOut the inOut for this renttransaction
	 * @param customer The customer of the renttransaction.
	 * @return true if succeed and false otherwise
	 */
	public static boolean updateRentTransaction(String rentTransactionID, String inOut, String customer) {
		Entity rentTransaction = null;
		try {
			rentTransaction = getRentTransaction(rentTransactionID);
			rentTransaction.setProperty(INOUT_PROPERTY, inOut);
			rentTransaction.setProperty(CUSTOMER_PROPERTY, customer);
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.put(rentTransaction);
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	//
	// DELETE RENTTRANSACTION
	//

	/**
	 * Delete the renttransaction if not linked to anything else.
	 * 
	 * @param rentTransactionID A string with the renttransaction ID (a long).
	 * @return True if succeed, false otherwise.
	 */
	public static boolean deleteRentTransaction(String rentTransactionID) {
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.delete(getKey(rentTransactionID));
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	//
	// QUERY RENTTRANSACTION
	//

	/**
	 * Return the requested number of renttransactions (e.g. 100).
	 * 
	 * @param limit The number of renttransactions to be returned.
	 * @return A list of GAE {@link Entity entities}.
	 */
	public static List<Entity> getFirstRentTransactions(int limit) {
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Query query = new Query(ENTITY_KIND);
		List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(limit));
		return result;
	}
	
	
	/**
	 * Return the requested number of renttransactions (e.g. 100).
	 * 
	 * @param limit The number of renttransactions to be returned.
	 * @return A list of GAE {@link Entity entities}.
	 */
	public static List<Entity> getRentTransactionsWithOut(int limit) {
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Query query = new Query(ENTITY_KIND);
		Filter filter = new FilterPredicate(INOUT_PROPERTY, FilterOperator.EQUAL, "Out");
		query.addSort(DATEVALUE_PROPERTY, Query.SortDirection.DESCENDING);
		query.setFilter(filter);
		//query.addFilter(INOUT_PROPERTY, Query.FilterOperator.EQUAL, "Out");
		//query.addFilter(propertyName, operator, value)
		List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(limit));
		return result;
	}

}
