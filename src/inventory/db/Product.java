/**
 * Copyright 2014 -
 * Licensed under the Academic Free License version 3.0
 * http://opensource.org/licenses/AFL-3.0
 * 
 * Authors: Alex Verkhovtsev
 */

package inventory.db;

import java.util.List;


import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Transaction;


/**
 * GAE ENTITY UTIL CLASS: "Product" <br>
 * PARENT: NONE <br>
 * KEY: A long Id generated by GAE <br>
 * FEATURES: <br>
 * - "name" a {@link String} with the name record for the product<br>
 */

public class Product {

	//
	// SECURITY
	//

	/**
	 * Private constructor to avoid instantiation.
	 */
	private Product() {
	}

	//
	// KIND
	//

	/**
	 * The name of the Permit ENTITY KIND used in GAE.
	 */
	private static final String ENTITY_KIND = "Product";

	//
	// KEY
	//

	/**
	 * Return the Key for a given Permit id given as String.
	 * 
	 * @param recordID A string with the record ID (a long).
	 * @return the Key for this recordID.
	 */
	public static Key getKey(String productID) {
		long id = Long.parseLong(productID);
		Key productKey = KeyFactory.createKey(ENTITY_KIND, id);
		return productKey;
	}

	/**
	 * Return the string ID corresponding to the key for the permit.
	 * 
	 * @param record The GAE Entity storing the record.
	 * @return A string with the record ID (a long).
	 */
	public static String getStringID(Entity product) {
		return Long.toString(product.getKey().getId());
	}

	//
	// Name
	//

	/**
	 * The property name for the <b>name</b> value of the product.
	 */
	private static final String NAME_PROPERTY = "Name";

	/**
	 * Return the time for the record.
	 * 
	 * @param record The GAE Entity storing the time
	 * @return the time in the record.
	 */
	public static String getName(Entity record) {
		Object name = record.getProperty(NAME_PROPERTY);
		if (name == null)
			name = "";
		return (String) name;
	}

	

	//
	// CREATE PRODUCT
	//

	/**
	 * Create a new product if the productID is correct and none exists with this id.
	 * 
	 * @param prodctID The time for this product.
	 * @return the Entity created with this id or null if error
	 */
	public static Entity createProduct(String productName) {
		Entity product = null;
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Transaction txn = datastore.beginTransaction();
		try {

			product = new Entity(ENTITY_KIND);
			product.setProperty(NAME_PROPERTY, productName);
			datastore.put(product);

			txn.commit();
		} catch (Exception e) {
			return null;
		} finally {
			if (txn.isActive()) {
				txn.rollback();
			}
		}

		return product;
	}

	//
	// GET PRODUCT
	//

	/**
	 * Get the product based on a string containing its long ID.
	 * 
	 * @param productID a {@link String} containing the ID key (a <code>long</code> number)
	 * @return A GAE {@link Entity} for the Product or <code>null</code> if none or error.
	 */
	public static Entity getProduct(String productID) {
		Entity product = null;
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			long id = Long.parseLong(productID);
			Key productKey = KeyFactory.createKey(ENTITY_KIND, id);
			product = datastore.get(productKey);
		} catch (Exception e) {
			// TODO log the error
		}
		return product;
	}


	//
	// UPDATE PRODUCT
	//

	/**
	 * Update the current description of the product
	 * 
	 * @param productID A string with the product ID (a long).
	 * @param name The name of the product as a String.
	 * @return true if succeed and false otherwise
	 */
	public static boolean updateProduct(String productID, String name) {
		Entity product = null;
		try {
			product = getProduct(productID);
			product.setProperty(NAME_PROPERTY, product);
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.put(product);
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	//
	// DELETE PRODUCT
	//

	/**
	 * Delete the product if not linked to anything else.
	 * 
	 * @param productID A string with the product ID (a long).
	 * @return True if succeed, false otherwise.
	 */
	public static boolean deleteProduct(String productID) {
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.delete(getKey(productID));
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	//
	// QUERY PRODUCT
	//

	/**
	 * Return the requested number of products (e.g. 100).
	 * 
	 * @param limit The number of products to be returned.
	 * @return A list of GAE {@link Entity entities}.
	 */
	public static List<Entity> getFirstProducts(int limit) {
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Query query = new Query(ENTITY_KIND);
		List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(limit));
		return result;
	}

}
