/**
 * Copyright 2014 -
 * Licensed under the Academic Free License version 3.0
 * http://opensource.org/licenses/AFL-3.0
 * 
 * Authors: Alex Verkhovtsev
 */

package inventory.db;

import java.util.List;



import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Transaction;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.appengine.api.datastore.Query.FilterPredicate;


/**
 * GAE ENTITY UTIL CLASS: "InvUser" <br>
 * PARENT: NONE <br>
 * KEY: A long Id generated by GAE <br>
 * FEATURES: <br>
 * - "first name" a {@link String} with the first name record for the invuser<br>
 * - "last name" a {@link String} with the last name record for the invuser<br>
 * - "isStandardUser" a {@link String} with the isStandardUser record for the invuser<br>
 * - "isAdmin" a {@link String} with the isadmin record for the invuser<br>
 */

public class InvUser {

	//
	// SECURITY
	//

	/**
	 * Private constructor to avoid instantiation.
	 */
	private InvUser() {
	}

	//
	// KIND
	//

	/**
	 * The name of the InvTransaction ENTITY KIND used in GAE.
	 */
	private static final String ENTITY_KIND = "InvUser";

	//
	// KEY
	//

	/**
	 * Return the Key for a given InvUser id given as String.
	 * 
	 * @param invUserID A string with the InvUser ID (a long).
	 * @return the Key for this invUserID.
	 */
	public static Key getKey(String invUserID) {
		long id = Long.parseLong(invUserID);
		Key invUserKey = KeyFactory.createKey(ENTITY_KIND, id);
		return invUserKey;
	}

	/**
	 * Return the string ID corresponding to the key for the invuser.
	 * 
	 * @param product The GAE Entity storing the invuser.
	 * @return A string with the invuser ID (a long).
	 */
	public static String getStringID(Entity invUser) {
		return Long.toString(invUser.getKey().getId());
	}

	//
	// ATTRIBUTES
	//
	
	
	/**
	 * The property loginID for the <b>loginID</b> value of the invuser.
	 */
	private static final String LOGINID_PROPERTY = "LoginID";
	
	/**
	 * The property firstName for the <b>firstname</b> value of the invuser.
	 */
	private static final String FIRSTNAME_PROPERTY = "FirstName";

	/**
	 * The property lastName for the <b>lastname</b> value of the invuser.
	 */
	private static final String LASTNAME_PROPERTY = "LastName";

	/**
	 * The property isadmin for the <b>isadmin</b> value of the invuser.
	 */
	private static final String ISADMIN_PROPERTY = "IsAdmin";
	
	/**
	 * The property isstandarduser for the <b>isstandarduser</b> value of the invuser.
	 */
	private static final String ISSTANDARDUSER_PROPERTY = "IsStandardUser";
	
	
	
	
	//
	// GETTERS
	//
	
	/**
	 * Return the loginID for the invuser.
	 * 
	 * @param invuser The GAE Entity storing the invuser
	 * @return the loginid in the invuser.
	 */
	public static String getLoginID(Entity invUser) {
		Object loginID = invUser.getProperty(LOGINID_PROPERTY);
		if (loginID == null)
			loginID = "";
		return (String) loginID;
	}
	
	/**
	 * Return the firstname for the invuser.
	 * 
	 * @param invuser The GAE Entity storing the invuser
	 * @return the firstname in the invuser.
	 */
	public static String getFirstName(Entity invUser) {
		Object firstName = invUser.getProperty(FIRSTNAME_PROPERTY);
		if (firstName == null)
			firstName = "";
		return (String) firstName;
	}
	
	/**
	 * Return the lastname for the invuser.
	 * 
	 * @param invuser The GAE Entity storing the lastname
	 * @return the lastname in the invuser.
	 */
	public static String getLastName(Entity invUser) {
		Object lastName = invUser.getProperty(LASTNAME_PROPERTY);
		if (lastName == null)
			lastName = "";
		return (String) lastName;
	}
	
	/**
	 * Return the isadmin for the invuser.
	 * 
	 * @param invuser The GAE Entity storing the isadmin 
	 * @return the isadmin in the invuser.
	 */
	public static String getIsAdmin(Entity invUser) {
		Object isAdmin = invUser.getProperty(ISADMIN_PROPERTY);
		if (isAdmin == null)
			isAdmin = "";
		return (String) isAdmin;
	}
	
	
	/**
	 * Return the isstandarduser for the invuser.
	 * 
	 * @param invuser The GAE Entity storing the isstandarduser 
	 * @return the istandarduser in the invuser.
	 */
	public static String getIsStandardUser(Entity invUser) {
		Object isStandardUser = invUser.getProperty(ISSTANDARDUSER_PROPERTY);
		if (isStandardUser == null)
			isStandardUser = "";
		return (String) isStandardUser;
	}
	
	
	

	

	//
	// CREATE INVUSER
	//

	/**
	 * Create a new invuser if the invuserid is correct and none exists with this id.
	 * 
	 * @param firstName the firstname for this invuser
	 * @param lastName the lastname for this invuser 
	 * @param isAdmin the isAdmin value for this invuser
	 * @param isStandardUser the is Standard user value for this invuser
	 * @return the Entity created with this id or null if error
	 */
	public static Entity createInvUser(String loginID, String firstName, String lastName, String isAdmin, String isStandardUser) {
		Entity invUser = null;
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Transaction txn = datastore.beginTransaction();
		try {

			invUser = new Entity(ENTITY_KIND);
			invUser.setProperty(LOGINID_PROPERTY, loginID);
			invUser.setProperty(FIRSTNAME_PROPERTY, firstName);
			invUser.setProperty(LASTNAME_PROPERTY, lastName);
			invUser.setProperty(ISADMIN_PROPERTY, isAdmin);
			invUser.setProperty(ISSTANDARDUSER_PROPERTY, isStandardUser);
			datastore.put(invUser);

			txn.commit();
		} catch (Exception e) {
			return null;
		} finally {
			if (txn.isActive()) {
				txn.rollback();
			}
		}

		return invUser;
	}

	//
	// GET INVUSER
	//

	/**
	 * Get the invuser based on a string containing its long ID.
	 * 
	 * @param invUserID a {@link String} containing the ID key (a <code>long</code> number)
	 * @return A GAE {@link Entity} for the InvUserID or <code>null</code> if none or error.
	 */
	public static Entity getInvUser(String invUserID) {
		Entity invUser = null;
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			long id = Long.parseLong(invUserID);
			Key invUserKey = KeyFactory.createKey(ENTITY_KIND, id);
			invUser = datastore.get(invUserKey);
		} catch (Exception e) {
			// TODO log the error
		}
		return invUser;
	}
	
	
	/**
     * Get an user based on a string containing its loginID.
     * @param loginID The login of the user as a String.
     * @return A GAE {@link Entity} for the user or <code>null</code> if none or error.
     */
    public static Entity getInvUserWithLoginID(String loginID) {
            DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
            return getInvUserWithLoginID(datastore, loginID);
    }
    
    /**
     * Get a user based on a string containing its name.
     * @param datastore The current datastore instance. 
     * @param loginID for user
     * @return A GAE {@link Entity} for the User or <code>null</code> if none or error.
     */
    public static Entity getInvUserWithLoginID(DatastoreService datastore, String loginID) {
            Entity invUser = null;
            try {
                    
                    Filter hasLoginID = new FilterPredicate(LOGINID_PROPERTY, FilterOperator.EQUAL, loginID);
                    Query query = new Query(ENTITY_KIND);
                    query.setFilter(hasLoginID);
                    List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(10));
                    if (result!=null && result.size()>0) {
                            invUser=result.get(0);
                    }
            } catch (Exception e) {
                    // TODO log the error
            }
            return invUser;
    }


	//
	// UPDATE INVUSER
	//

	/**
	 * Update the current description of the inuser
	 * 
	 * @param invUserID A string with the invuser ID (a long).
	 * @param firstName the firstname for this invuser 
	 * @param lastName the lastname for this invuser
	 * @param isAdmin the isAdmin value for this invuser
	 * @return true if succeed and false otherwise
	 */
	public static boolean updateUser(String invUserID, String firstName, String lastName, String isAdmin, String isStandardUser) {
		Entity invUser = null;
		try {
			invUser = getInvUser(invUserID);
			invUser.setProperty(FIRSTNAME_PROPERTY, firstName);
			invUser.setProperty(LASTNAME_PROPERTY, lastName);
			invUser.setProperty(ISADMIN_PROPERTY, isAdmin);
			invUser.setProperty(ISSTANDARDUSER_PROPERTY, isStandardUser);
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.put(invUser);
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	//
	// DELETE INVUSER
	//

	/**
	 * Delete the invuser if not linked to anything else.
	 * 
	 * @param invUserID A string with the invuser ID (a long).
	 * @return True if succeed, false otherwise.
	 */
	public static boolean deleteInvUser(String invUserID) {
		try {
			DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
			datastore.delete(getKey(invUserID));
		} catch (Exception e) {
			return false;
		}
		return true;
	}

	//
	// QUERY INVUSER
	//

	/**
	 * Return the requested number of invusers (e.g. 100).
	 * 
	 * @param limit The number of invusers to be returned.
	 * @return A list of GAE {@link Entity entities}.
	 */
	public static List<Entity> getFirstInvUsers(int limit) {
		DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();
		Query query = new Query(ENTITY_KIND);
		List<Entity> result = datastore.prepare(query).asList(FetchOptions.Builder.withLimit(limit));
		return result;
	}

}
